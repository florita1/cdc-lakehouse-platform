apiVersion: apps/v1
kind: Deployment
metadata:
  name: connect
  namespace: debezium
  labels: { app: connect }
spec:
  replicas: 1
  selector:
    matchLabels: { app: connect }
  template:
    metadata:
      labels: { app: connect }
    spec:
      containers:
        - name: connect
          image: quay.io/debezium/connect:2.6
          ports:
            - containerPort: 8083
          env:
            - name: BOOTSTRAP_SERVERS
              value: redpanda.redpanda.svc.cluster.local:9093
            - name: GROUP_ID
              value: connect-cluster

            # Internal topics (single broker!)
            - name: CONFIG_STORAGE_TOPIC
              value: connect-configs
            - name: OFFSET_STORAGE_TOPIC
              value: connect-offsets
            - name: STATUS_STORAGE_TOPIC
              value: connect-status
            - name: CONFIG_STORAGE_REPLICATION_FACTOR
              value: "1"
            - name: OFFSET_STORAGE_REPLICATION_FACTOR
              value: "1"
            - name: STATUS_STORAGE_REPLICATION_FACTOR
              value: "1"

            # Converters
            - name: KEY_CONVERTER
              value: org.apache.kafka.connect.json.JsonConverter
            - name: VALUE_CONVERTER
              value: org.apache.kafka.connect.json.JsonConverter

            # Debezium plugin path
            - name: PLUGIN_PATH
              value: /kafka/connect,/debezium

            # enables ${env:...} expansion in connector configs
            - name: CONFIG_PROVIDERS
              value: env
            - name: CONFIG_PROVIDERS_ENV_CLASS
              value: org.apache.kafka.common.config.provider.EnvVarConfigProvider
            # optional: restrict which envs can be read
            - name: CONFIG_PROVIDERS_ENV_PARAM_ALLOWLIST
              value: PG_PASSWORD

            # For ${env:PG_PASSWORD} in connector.json
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_PASSWORD

          readinessProbe:
            httpGet: { path: /connectors, port: 8083 }
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet: { path: /connectors, port: 8083 }
            initialDelaySeconds: 20
            periodSeconds: 10
